TODO

1. support functions:
	- readln
	- string concat
	- long division


4. find some way to tell the register allocator about caller-saved registers
	- ideally we want some way to automatically spill a1-a4 across a function call
	- maybe by having calls "def" a1-a4, but those are registers and not variables...

8. locals should be cleared to 0 i guess.

11. see if we need (want) to toposort the basic blocks before renumbering/allocating

17. register allocation coalescing

19. see if it's possible to "properly split" the live ranges. right now, even though there might be disjoint parts in a var's
	live range, the var must still use the same register (or spill) throughout.

	if possible, split it up, so that we can (eg.) perform partial spills, and/or use a different register for different
	subranges of the live range.



20. change asm generation into some kind of datastructure.
	- this would allow us to *not* do string matching for...

21. peephole optimisations









-- for now, we only consider IN.
11. investigate whether the live range of a def should consider statements where the def only
	appears in OUT, and not in IN.



-- for now, we decided to just modify the caller stack.
8. investigate whether the spilling "backup" is required. arm specs say:
	"A callee can modify any stack space used for receiving parameter values from the caller."
	Procedure Call Standard for the Arm Architecture, Release 2020Q2 (page 24)
