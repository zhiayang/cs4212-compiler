.text
.global main_dummy
.type main_dummy, %function
main_dummy:
	@ spills:  <none>
	@ assigns: '_t0' = a1;  '_t1' = a1;  '_t2' = a1;  '_c1' = a2;  '_t4' = a2
	@          '_t3' = v1;    'f' = v1
	stmfd sp!, {v1, lr}
.main_dummy_entry:
	ldr a2, =.string0                       @ _c1 = "hello, \"world\"!";
	sub sp, sp, #4                          @ align adjustment (pre)
	mov a2, a2
	add a2, a2, #4
	ldr a1, =.string1_raw
	bl printf(PLT)                          @ println(_c1);
	add sp, sp, #4                          @ align adjustment (post)
	sub sp, sp, #4                          @ _t0 = new Foo();; align adjustment (pre)
	mov a1, #1
	mov a2, #4
	bl calloc(PLT)
	mov a1, a1
	add sp, sp, #4                          @ align adjustment (post)
	sub sp, sp, #4                          @ _t1 = _J3Foo_3barE(_t0);; align adjustment (pre)
	mov a1, a1                              @ arg 4
	bl _J3Foo_3barE                         @ _J3Foo_3barE(_t0)
	mov a1, a1
	add sp, sp, #4                          @ align adjustment (post)
	sub sp, sp, #4                          @ _t2 = _J3Foo_3barE(_t1);; align adjustment (pre)
	mov a1, a1                              @ arg 4
	bl _J3Foo_3barE                         @ _J3Foo_3barE(_t1)
	mov a1, a1
	add sp, sp, #4                          @ align adjustment (post)
	sub sp, sp, #4                          @ _t3 = _J3Foo_3barE(_t2);; align adjustment (pre)
	mov a1, a1                              @ arg 4
	bl _J3Foo_3barE                         @ _J3Foo_3barE(_t2)
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov v1, v1                              @ f = _t3;
	ldr a2, [v1, #0]                        @ _t4 = f.f1;
	sub sp, sp, #4                          @ align adjustment (pre)
	mov a2, a2
	ldr a1, =.string2_raw
	bl printf(PLT)                          @ println(_t4);
	add sp, sp, #4                          @ align adjustment (post)
	b .main_dummy_exit
.main_dummy_exit:
	ldmfd sp!, {v1, pc}


.align 4
.ltorg
.global _J3Foo_3barE
.type _J3Foo_3barE, %function
_J3Foo_3barE:
	@ spills:  <none>
	@ assigns: 'this' = a1;  '_c18' = a2;  '_g11' = v1;  '_g15' = v1;   '_t0' = v1
	@           '_t1' = v1;   '_t2' = v1;   '_t3' = v1;   '_c8' = v2
	stmfd sp!, {v1, v2, lr}
	mov a1, a1
._J3Foo_3barE_entry:
	ldr v1, [a1, #0]                        @ _t0 = this.f1;
	cmp v1, #0                              @ _t1 = _t0 == 0;
	moveq v1, #1
	movne v1, #0
	cmp v1, #0
	bne ._J3Foo_3barE_L1                    @ if (_t1) goto .L1;
	b ._J3Foo_3barE_L2                      @ goto .L2;
._J3Foo_3barE_L2:
	ldr v1, [a1, #0]                        @ _t2 = this.f1;
	mov v2, #2                              @ _c8 = 2;
	mul v1, v1, v2                          @ _t3 = _t2 * _c8;
	mov v1, v1                              @ _g11 = _t3;
	str v1, [a1, #0]                        @ storefield: Int, *this.f1 = _g11;
	b ._J3Foo_3barE_L3                      @ goto .L3;
._J3Foo_3barE_L1:
	mov v1, #1                              @ _g15 = 1;
	str v1, [a1, #0]                        @ storefield: Int, *this.f1 = _g15;
	b ._J3Foo_3barE_L3                      @ goto .L3;
._J3Foo_3barE_L3:
	ldr a2, =.string3                       @ _c18 = "you should see this 3 times";
	stmfd sp!, {a1}                         @ caller-save
	mov a2, a2
	add a2, a2, #4
	ldr a1, =.string1_raw
	bl printf(PLT)                          @ println(_c18);
	ldmfd sp!, {a1}                         @ caller-restore
	mov a1, a1
	b ._J3Foo_3barE_exit
._J3Foo_3barE_exit:
	ldmfd sp!, {v1, v2, pc}


.align 4
.ltorg

.global main
.type main, %function
main:
	str lr, [sp, #-4]!
	@ we need a 'this' argument for this guy, so just allocate nothing.
	sub sp, sp, #4
	mov a1, sp

	bl main_dummy

	add sp, sp, #4

	@ set the return code to 0
	mov a1, #0
	ldr pc, [sp], #4

.data
.global stdin
.align 4
.string0:
    .word 15
.string0_raw:
    .asciz "hello, \"world\"!"

.align 4
.string1:
    .word 3
.string1_raw:
    .asciz "%s\n"

.align 4
.string2:
    .word 3
.string2_raw:
    .asciz "%d\n"

.align 4
.string3:
    .word 27
.string3_raw:
    .asciz "you should see this 3 times"

