.text
.global main_dummy
.type main_dummy, %function
main_dummy:
	@ spills:  <none>
	@ assigns: '_t0' = a1;  '_t1' = a2
	stmfd sp!, {lr}
.main_dummy_entry:
	sub sp, sp, #4                          @ _t0 = new Foo();; align adjustment (pre)
	mov a1, #1
	mov a2, #4
	bl calloc(PLT)
	mov a1, a1
	add sp, sp, #4                          @ align adjustment (post)
	sub sp, sp, #4                          @ _t1 = _J3Foo_1xE(_t0);; align adjustment (pre)
	mov a1, a1
	bl _J3Foo_1xE
	mov a2, a1
	add sp, sp, #4                          @ align adjustment (post)
	sub sp, sp, #4                          @ println(_t1);; align adjustment (pre)
	mov a2, a2
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	b .main_dummy_exit                      @ return;
.main_dummy_exit:
	ldmfd sp!, {pc}


.global _J3Foo_1xE
.type _J3Foo_1xE, %function
_J3Foo_1xE:
	@ spills:  <none>
	@ assigns: 'this' = a1;   '_t0' = v1
	stmfd sp!, {v1, lr}
	mov a1, a1
._J3Foo_1xE_entry:
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiE(this, 1);; align adjustment (pre)
	mov a1, a1
	mov a2, #1
	bl _J3Foo_1xiE
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xE_exit
._J3Foo_1xE_exit:
	ldmfd sp!, {v1, pc}


.global _J3Foo_1xiE
.type _J3Foo_1xiE, %function
_J3Foo_1xiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;   '_t0' = v1
	stmfd sp!, {v1, lr}
	mov a1, a1
	mov a2, a2
._J3Foo_1xiE_entry:
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiE(this, a, 2);; align adjustment (pre)
	mov a1, a1
	mov a2, a2
	mov a3, #2
	bl _J3Foo_1xiiE
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiE_exit
._J3Foo_1xiE_exit:
	ldmfd sp!, {v1, pc}


.global _J3Foo_1xiiE
.type _J3Foo_1xiiE, %function
_J3Foo_1xiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;   '_t0' = v1
	stmfd sp!, {v1, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
._J3Foo_1xiiE_entry:
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiE(this, a, b, 3);; align adjustment (pre)
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, #3
	bl _J3Foo_1xiiiE
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiE_exit
._J3Foo_1xiiE_exit:
	ldmfd sp!, {v1, pc}


.global _J3Foo_1xiiiE
.type _J3Foo_1xiiiE, %function
_J3Foo_1xiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;   '_t0' = v1
	stmfd sp!, {v1, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
._J3Foo_1xiiiE_entry:
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiE(this, a, b, c, 4);; align adjustment (pre)
	sub sp, sp, #4
	mov a1, #4
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiE
	add sp, sp, #4
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiE_exit
._J3Foo_1xiiiE_exit:
	ldmfd sp!, {v1, pc}


.global _J3Foo_1xiiiiE
.type _J3Foo_1xiiiiE, %function
_J3Foo_1xiiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;   '_t0' = v1
	@             'd' = v1
	stmfd sp!, {v1, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #8]
._J3Foo_1xiiiiE_entry:
	str v1, [sp, #-8]                       @ stack_arg 4: d;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiE(this, a, b, c, d, 5);; align adjustment (pre)
	sub sp, sp, #8
	mov a1, #5
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiE
	add sp, sp, #8
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiE_exit
._J3Foo_1xiiiiE_exit:
	ldmfd sp!, {v1, pc}


.global _J3Foo_1xiiiiiE
.type _J3Foo_1xiiiiiE, %function
_J3Foo_1xiiiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;   '_t0' = v1
	@             'e' = v1;     'd' = v2
	stmfd sp!, {v1, v2, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #12]
	ldr v2, [sp, #16]
._J3Foo_1xiiiiiE_entry:
	str v2, [sp, #-8]                       @ stack_arg 4: d;
	str v1, [sp, #-12]                      @ stack_arg 5: e;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiE(this, a, b, c, d, e, 6);; align adjustment (pre)
	sub sp, sp, #12
	mov a1, #6
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiE
	add sp, sp, #12
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiE_exit
._J3Foo_1xiiiiiE_exit:
	ldmfd sp!, {v1, v2, pc}


.global _J3Foo_1xiiiiiiE
.type _J3Foo_1xiiiiiiE, %function
_J3Foo_1xiiiiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;   '_t0' = v1
	@             'f' = v1;     'e' = v2;     'd' = v3
	stmfd sp!, {v1, v2, v3, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #16]
	ldr v2, [sp, #20]
	ldr v3, [sp, #24]
._J3Foo_1xiiiiiiE_entry:
	str v3, [sp, #-8]                       @ stack_arg 4: d;
	str v2, [sp, #-12]                      @ stack_arg 5: e;
	str v1, [sp, #-16]                      @ stack_arg 6: f;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiE(this, a, b, c, d, e, f, 7);; align adjustment (pre)
	sub sp, sp, #16
	mov a1, #7
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiE
	add sp, sp, #16
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiE_exit
._J3Foo_1xiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, pc}


.global _J3Foo_1xiiiiiiiE
.type _J3Foo_1xiiiiiiiE, %function
_J3Foo_1xiiiiiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;   '_t0' = v1
	@             'g' = v1;     'f' = v2;     'e' = v3;     'd' = v4
	stmfd sp!, {v1, v2, v3, v4, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #20]
	ldr v2, [sp, #24]
	ldr v3, [sp, #28]
	ldr v4, [sp, #32]
._J3Foo_1xiiiiiiiE_entry:
	str v4, [sp, #-8]                       @ stack_arg 4: d;
	str v3, [sp, #-12]                      @ stack_arg 5: e;
	str v2, [sp, #-16]                      @ stack_arg 6: f;
	str v1, [sp, #-20]                      @ stack_arg 7: g;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiiE(this, a, b, c, d, e, f, g, 8);; align adjustment (pre)
	sub sp, sp, #20
	mov a1, #8
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiiE
	add sp, sp, #20
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiiE_exit
._J3Foo_1xiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, pc}


.global _J3Foo_1xiiiiiiiiE
.type _J3Foo_1xiiiiiiiiE, %function
_J3Foo_1xiiiiiiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;   '_t0' = v1
	@             'h' = v1;     'g' = v2;     'f' = v3;     'e' = v4;     'd' = v5
	stmfd sp!, {v1, v2, v3, v4, v5, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #24]
	ldr v2, [sp, #28]
	ldr v3, [sp, #32]
	ldr v4, [sp, #36]
	ldr v5, [sp, #40]
._J3Foo_1xiiiiiiiiE_entry:
	str v5, [sp, #-8]                       @ stack_arg 4: d;
	str v4, [sp, #-12]                      @ stack_arg 5: e;
	str v3, [sp, #-16]                      @ stack_arg 6: f;
	str v2, [sp, #-20]                      @ stack_arg 7: g;
	str v1, [sp, #-24]                      @ stack_arg 8: h;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiiiE(this, a, b, c, d, e, f, g, h, 9);; align adjustment (pre)
	sub sp, sp, #24
	mov a1, #9
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiiiE
	add sp, sp, #24
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiiiE_exit
._J3Foo_1xiiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, v5, pc}


.global _J3Foo_1xiiiiiiiiiE
.type _J3Foo_1xiiiiiiiiiE, %function
_J3Foo_1xiiiiiiiiiE:
	@ spills:  <none>
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;     'd' = fp
	@           '_t0' = v1;     'i' = v1;     'h' = v2;     'g' = v3;     'f' = v4
	@             'e' = v5
	stmfd sp!, {v1, v2, v3, v4, v5, fp, lr}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #28]
	ldr v2, [sp, #32]
	ldr v3, [sp, #36]
	ldr v4, [sp, #40]
	ldr v5, [sp, #44]
	ldr fp, [sp, #48]
._J3Foo_1xiiiiiiiiiE_entry:
	str fp, [sp, #-8]                       @ stack_arg 4: d;
	str v5, [sp, #-12]                      @ stack_arg 5: e;
	str v4, [sp, #-16]                      @ stack_arg 6: f;
	str v3, [sp, #-20]                      @ stack_arg 7: g;
	str v2, [sp, #-24]                      @ stack_arg 8: h;
	str v1, [sp, #-28]                      @ stack_arg 9: i;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiiiiE(this, a, b, c, d, e, f, g, h, i, 10);; align adjustment (pre)
	sub sp, sp, #28
	mov a1, #10
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiiiiE
	add sp, sp, #28
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiiiiE_exit
._J3Foo_1xiiiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, v5, fp, pc}


.global _J3Foo_1xiiiiiiiiiiE
.type _J3Foo_1xiiiiiiiiiiE, %function
_J3Foo_1xiiiiiiiiiiE:
	@ spills:  'a', 'b', 'c', 'j', 'this'
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;     'd' = fp
	@           '_t0' = v1;     'i' = v1;     'j' = v1;     'h' = v2;     'g' = v3
	@             'f' = v4;     'e' = v5
	stmfd sp!, {lr}
	sub sp, sp, #16
	stmfd sp!, {v1, v2, v3, v4, v5, fp}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #48]
	ldr v2, [sp, #52]
	ldr v3, [sp, #56]
	ldr v4, [sp, #60]
	ldr v5, [sp, #64]
	ldr fp, [sp, #68]
._J3Foo_1xiiiiiiiiiiE_entry:
	str a1, [sp, #12]                       @ spill this;
	str a4, [sp, #0]                        @ spill c;
	str a3, [sp, #4]                        @ spill b;
	str a2, [sp, #8]                        @ spill a;
	str fp, [sp, #-8]                       @ stack_arg 4: d;
	str v5, [sp, #-12]                      @ stack_arg 5: e;
	str v4, [sp, #-16]                      @ stack_arg 6: f;
	str v3, [sp, #-20]                      @ stack_arg 7: g;
	str v2, [sp, #-24]                      @ stack_arg 8: h;
	str v1, [sp, #-28]                      @ stack_arg 9: i;
	ldr v1, [sp, #44]                       @ restore j;
	str v1, [sp, #-32]                      @ stack_arg 10: j;
	ldr a2, [sp, #8]                        @ restore a;
	ldr a3, [sp, #4]                        @ restore b;
	ldr a4, [sp, #0]                        @ restore c;
	ldr a1, [sp, #12]                       @ restore this;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiiiiiE(this, a, b, c, d, e, f, g, h, i, j, 11);; align adjustment (pre)
	sub sp, sp, #32
	mov a1, #11
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiiiiiE
	add sp, sp, #32
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiiiiiE_exit
._J3Foo_1xiiiiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, v5, fp}
	add sp, sp, #16
	ldmfd sp!, {pc}


.global _J3Foo_1xiiiiiiiiiiiE
.type _J3Foo_1xiiiiiiiiiiiE, %function
_J3Foo_1xiiiiiiiiiiiE:
	@ spills:  'a', 'b', 'c', 'j', 'k', 'this'
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;     'd' = fp
	@           '_t0' = v1;     'i' = v1;     'j' = v1;     'k' = v1;     'h' = v2
	@             'g' = v3;     'f' = v4;     'e' = v5
	stmfd sp!, {lr}
	sub sp, sp, #16
	stmfd sp!, {v1, v2, v3, v4, v5, fp}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #52]
	ldr v2, [sp, #56]
	ldr v3, [sp, #60]
	ldr v4, [sp, #64]
	ldr v5, [sp, #68]
	ldr fp, [sp, #72]
._J3Foo_1xiiiiiiiiiiiE_entry:
	str a2, [sp, #8]                        @ spill a;
	str a1, [sp, #12]                       @ spill this;
	str a4, [sp, #0]                        @ spill c;
	str a3, [sp, #4]                        @ spill b;
	str fp, [sp, #-8]                       @ stack_arg 4: d;
	str v5, [sp, #-12]                      @ stack_arg 5: e;
	str v4, [sp, #-16]                      @ stack_arg 6: f;
	str v3, [sp, #-20]                      @ stack_arg 7: g;
	str v2, [sp, #-24]                      @ stack_arg 8: h;
	str v1, [sp, #-28]                      @ stack_arg 9: i;
	ldr v1, [sp, #48]                       @ restore j;
	str v1, [sp, #-32]                      @ stack_arg 10: j;
	ldr v1, [sp, #44]                       @ restore k;
	str v1, [sp, #-36]                      @ stack_arg 11: k;
	ldr a3, [sp, #4]                        @ restore b;
	ldr a4, [sp, #0]                        @ restore c;
	ldr a1, [sp, #12]                       @ restore this;
	ldr a2, [sp, #8]                        @ restore a;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiiiiiiE(this, a, b, c, d, e, f, g, h, i, j, k, 12);; align adjustment (pre)
	sub sp, sp, #36
	mov a1, #12
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiiiiiiE
	add sp, sp, #36
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiiiiiiE_exit
._J3Foo_1xiiiiiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, v5, fp}
	add sp, sp, #16
	ldmfd sp!, {pc}


.global _J3Foo_1xiiiiiiiiiiiiE
.type _J3Foo_1xiiiiiiiiiiiiE, %function
_J3Foo_1xiiiiiiiiiiiiE:
	@ spills:  'a', 'b', 'c', 'j', 'k', 'l', 'this'
	@ assigns: 'this' = a1;     'a' = a2;     'b' = a3;     'c' = a4;     'd' = fp
	@           '_t0' = v1;     'i' = v1;     'j' = v1;     'k' = v1;     'l' = v1
	@             'h' = v2;     'g' = v3;     'f' = v4;     'e' = v5
	stmfd sp!, {lr}
	sub sp, sp, #16
	stmfd sp!, {v1, v2, v3, v4, v5, fp}
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	ldr v1, [sp, #56]
	ldr v2, [sp, #60]
	ldr v3, [sp, #64]
	ldr v4, [sp, #68]
	ldr v5, [sp, #72]
	ldr fp, [sp, #76]
._J3Foo_1xiiiiiiiiiiiiE_entry:
	str a2, [sp, #8]                        @ spill a;
	str a3, [sp, #4]                        @ spill b;
	str a1, [sp, #12]                       @ spill this;
	str a4, [sp, #0]                        @ spill c;
	str fp, [sp, #-8]                       @ stack_arg 4: d;
	str v5, [sp, #-12]                      @ stack_arg 5: e;
	str v4, [sp, #-16]                      @ stack_arg 6: f;
	str v3, [sp, #-20]                      @ stack_arg 7: g;
	str v2, [sp, #-24]                      @ stack_arg 8: h;
	str v1, [sp, #-28]                      @ stack_arg 9: i;
	ldr v1, [sp, #52]                       @ restore j;
	str v1, [sp, #-32]                      @ stack_arg 10: j;
	ldr v1, [sp, #48]                       @ restore k;
	str v1, [sp, #-36]                      @ stack_arg 11: k;
	ldr v1, [sp, #44]                       @ restore l;
	str v1, [sp, #-40]                      @ stack_arg 12: l;
	ldr a4, [sp, #0]                        @ restore c;
	ldr a1, [sp, #12]                       @ restore this;
	ldr a3, [sp, #4]                        @ restore b;
	ldr a2, [sp, #8]                        @ restore a;
	sub sp, sp, #4                          @ _t0 = _J3Foo_1xiiiiiiiiiiiiiE(this, a, b, c, d, e, f, g, h, i, j, k, l, 13);; align adjustment (pre)
	sub sp, sp, #40
	mov a1, #13
	str a1, [sp, #0]
	mov a1, a1
	mov a2, a2
	mov a3, a3
	mov a4, a4
	bl _J3Foo_1xiiiiiiiiiiiiiE
	add sp, sp, #40
	mov v1, a1
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, v1                              @ return _t0;
	b ._J3Foo_1xiiiiiiiiiiiiE_exit
._J3Foo_1xiiiiiiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, v5, fp}
	add sp, sp, #16
	ldmfd sp!, {pc}


.global _J3Foo_1xiiiiiiiiiiiiiE
.type _J3Foo_1xiiiiiiiiiiiiiE, %function
_J3Foo_1xiiiiiiiiiiiiiE:
	@ spills:  'a', 'b', 'c', 'd', 'e', 'f'
	@ assigns: 'g' = a1;  'd' = a2;  'e' = a2;  'f' = a2;  'm' = a2;  'b' = a3
	@          'c' = a4;  'a' = fp;  'l' = v1;  'k' = v2;  'j' = v3;  'i' = v4
	@          'h' = v5
	stmfd sp!, {lr}
	sub sp, sp, #16
	stmfd sp!, {v1, v2, v3, v4, v5, fp}
	mov fp, a2
	mov a3, a3
	mov a4, a4
	ldr a2, [sp, #44]
	ldr v1, [sp, #48]
	ldr v2, [sp, #52]
	ldr v3, [sp, #56]
	ldr v4, [sp, #60]
	ldr v5, [sp, #64]
	ldr a1, [sp, #68]
._J3Foo_1xiiiiiiiiiiiiiE_entry:
	str fp, [sp, #12]                       @ spill a;
	str a3, [sp, #8]                        @ spill b;
	str a4, [sp, #4]                        @ spill c;
	stmfd sp!, {a1}                         @ println(m);; caller-save
	mov a2, a2
	ldr a1, =.string0_raw
	bl printf(PLT)
	ldmfd sp!, {a1}                         @ caller-restore
	stmfd sp!, {a1}                         @ println(l);; caller-save
	mov a2, v1
	ldr a1, =.string0_raw
	bl printf(PLT)
	ldmfd sp!, {a1}                         @ caller-restore
	stmfd sp!, {a1}                         @ println(k);; caller-save
	mov a2, v2
	ldr a1, =.string0_raw
	bl printf(PLT)
	ldmfd sp!, {a1}                         @ caller-restore
	stmfd sp!, {a1}                         @ println(j);; caller-save
	mov a2, v3
	ldr a1, =.string0_raw
	bl printf(PLT)
	ldmfd sp!, {a1}                         @ caller-restore
	stmfd sp!, {a1}                         @ println(i);; caller-save
	mov a2, v4
	ldr a1, =.string0_raw
	bl printf(PLT)
	ldmfd sp!, {a1}                         @ caller-restore
	stmfd sp!, {a1}                         @ println(h);; caller-save
	mov a2, v5
	ldr a1, =.string0_raw
	bl printf(PLT)
	ldmfd sp!, {a1}                         @ caller-restore
	sub sp, sp, #4                          @ println(g);; align adjustment (pre)
	mov a2, a1
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	ldr a2, [sp, #72]                       @ restore f;
	sub sp, sp, #4                          @ println(f);; align adjustment (pre)
	mov a2, a2
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	ldr a2, [sp, #76]                       @ restore e;
	sub sp, sp, #4                          @ println(e);; align adjustment (pre)
	mov a2, a2
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	ldr a2, [sp, #80]                       @ restore d;
	sub sp, sp, #4                          @ println(d);; align adjustment (pre)
	mov a2, a2
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	ldr a4, [sp, #4]                        @ restore c;
	sub sp, sp, #4                          @ println(c);; align adjustment (pre)
	mov a2, a4
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	ldr a3, [sp, #8]                        @ restore b;
	sub sp, sp, #4                          @ println(b);; align adjustment (pre)
	mov a2, a3
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	ldr fp, [sp, #12]                       @ restore a;
	sub sp, sp, #4                          @ println(a);; align adjustment (pre)
	mov a2, fp
	ldr a1, =.string0_raw
	bl printf(PLT)
	add sp, sp, #4                          @ align adjustment (post)
	mov a1, #0                              @ return 0;
	b ._J3Foo_1xiiiiiiiiiiiiiE_exit
._J3Foo_1xiiiiiiiiiiiiiE_exit:
	ldmfd sp!, {v1, v2, v3, v4, v5, fp}
	add sp, sp, #16
	ldmfd sp!, {pc}



.global main
.type main, %function
main:
	str lr, [sp, #-4]!
	@ we need a 'this' argument for this guy, so just allocate nothing.
	sub sp, sp, #4
	mov a1, sp

	bl main_dummy

	add sp, sp, #4

	@ set the return code to 0
	mov a1, #0
	ldr pc, [sp], #4

.data
.global stdin
.align 4
.string0:
    .word 3
.string0_raw:
    .asciz "%d\n"

