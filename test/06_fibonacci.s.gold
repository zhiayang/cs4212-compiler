.text
.global main_dummy
.type main_dummy, %function
main_dummy:
	@ spills:  <none>
	@ assigns:    'a' = a2;  '_c11' = v1;   '_c6' = v1;   '_t0' = v1;   '_t1' = v1
	@           '_t2' = v1;     'c' = v1;     'b' = v2
	stmfd sp!, {v1, v2, lr}
.main_dummy_entry:
	mov a2, #0                              @ a = 0;
	mov v2, #1                              @ b = 1;
	ldr v1, =#1836311903                    @ _c6 = 1836311903;
	cmp a2, v1                              @ _t2 = a != _c6;
	movne v1, #1
	moveq v1, #0
	cmp v1, #0
	bne .main_dummy_L2                      @ if (_t2) goto .L2;
	b .main_dummy_L3                        @ goto .L3;
.main_dummy_L1:
	ldr v1, =#1836311903                    @ _c11 = 1836311903;
	cmp a2, v1                              @ _t0 = a != _c11;
	movne v1, #1
	moveq v1, #0
	cmp v1, #0
	bne .main_dummy_L2                      @ if (_t0) goto .L2;
	b .main_dummy_L3                        @ goto .L3;
.main_dummy_L2:
	stmfd sp!, {a2}                         @ caller-save
	mov a2, a2
	ldr a1, =.string0_raw
	bl printf(PLT)                          @ println(a);
	ldmfd sp!, {a2}                         @ caller-restore
	add v1, a2, v2                          @ _t1 = a + b;
	mov v1, v1                              @ c = _t1;
	mov a2, v2                              @ a = b;
	mov v2, v1                              @ b = c;
	b .main_dummy_L1                        @ goto .L1;
.main_dummy_L3:
	b .main_dummy_exit
.main_dummy_exit:
	ldmfd sp!, {v1, v2, pc}


.align 4
.ltorg

.global main
.type main, %function
main:
	str lr, [sp, #-4]!
	@ we need a 'this' argument for this guy, so just allocate nothing.
	sub sp, sp, #4
	mov a1, sp

	bl main_dummy

	add sp, sp, #4

	@ set the return code to 0
	mov a1, #0
	ldr pc, [sp], #4

.data
.global stdin
.align 4
.string0:
    .word 3
.string0_raw:
    .asciz "%d\n"

